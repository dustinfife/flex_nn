rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
require(flexplot)
require(tidyverse)
require(party)
devtools::load_all(".")
d_original = read.csv("~/Downloads/data/Study 4 for R.csv")
names(d_original)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
traceback()
require(flexplot)
require(tidyverse)
require(party)
devtools::load_all(".")
d_original = read.csv("~/Downloads/data/Study 4 for R.csv")
names(d_original)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
methods(generate_predictions)
methods(generate_predictors)
require(flexplot)
methods(generate_predictors)
devtools::load_all(".")
methods(generate_predictors)
require(tidyverse)
require(party)
d_original = read.csv("~/Downloads/data/Study 4 for R.csv")
names(d_original)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
require(flexplot)
require(tidyverse)
require(party)
d_original = read.csv("~/Downloads/data/Study 4 for R.csv")
devtools::load_all(".")
names(d_original)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
k
formula
data
data$teleology
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
formula
binned_data
a
replace_numeric_with_average
breaks
compare.fits(fire~civilian_deserve | teleology,
data=d, rf_mod, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
str(data)
list(...)
list_values
given
formula
list_values
binned_data
k
breaks
a
names(breaks)
replace_numeric_with_average
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
replace_numeric_with_average
names(breaks)
require(flexplot)
require(tidyverse)
require(party)
devtools::load_all(".")
d_original = read.csv("~/Downloads/data/Study 4 for R.csv")
names(d_original)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, rf_mod, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
a
devtools::load_all(".")
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
binned_name
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
means_by_bin
round(as.numeric(as.character(
cut(data[,variable],
breaks[[variable]],
labels = means_by_bin[,2]))), digits=3)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
data[,variable]
breaks[[variable]]
means_by_bin
cut(data[,variable],
breaks[[variable]],
labels = means_by_bin[,2])))
)
cut(data[,variable],
breaks[[variable]],
labels = means_by_bin[,2])
data[,variable]
breaks[[variable]]
means_by_bin[,2]
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, rf_mod, alpha = .1, bins=2) %>%
logistic_overlay
flexplot:::bin_if_theres_a_flexplot_formula(fire~civilian_deserve | teleology, data = d)
compare.fits(fire~civilian_deserve | teleology,
data=d, rf_mod, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
data[,variable]
breaks[[variable]]
means_by_bin[,2]
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
data[,variable]
require(flexplot)
require(tidyverse)
require(party)
devtools::load_all(".")
d_original = read.csv("~/Downloads/data/Study 4 for R.csv")
names(d_original)
d = d_original %>%
select(-c(StartDate, Durationinseconds)) %>%
rename("enemy_deserve" = P1Des) %>%
rename("civilian_deserve" = P2Des) %>%
rename("acceptable" = Accept_1) %>%
rename("hospital_targets_legitimate" = TW_1) %>%
rename("hospital_never_target" = TW_2R) %>%
rename("responsiblity_us_vs_them" = TW_3) %>%
rename("alls_fair" = TW_4) %>%
rename("d.teleology" = TW_L3) %>%
rename("teleology" = TW_L4) %>%
rename("target_if_hiding" = TW_L5) %>%
rename("ok_no_advantage" = TW_L1) %>%
rename("ok_yes_advantage" = TW_L2) %>%
rename("fire" = Fire) %>%
select(-c(TotalWarBeliefs, Condition, acceptable, d.teleology)) %>%
mutate(Edu = factor(Edu, ordered=T),
Guilty = factor(Guilty)) %>%
drop_na()
## now let's do a RF to find the best predictors
rf_mod = cforest(fire~., data=d)
rf_mod_estimates = estimates(rf_mod)
set.seed(1231231)
mod_layers = function(model, input_dim) {
keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = input_dim) %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 1, activation = "sigmoid") # sigmoid for binary classification
}
nn_model = nn(fire~., data=d, layers = mod_layers, loss = "binary_crossentropy", metrics = c("accuracy", metric_auc()))
estimates(nn_model)
compare.fits(fire~civilian_deserve | teleology,
data=d, rf_mod, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model, alpha = .1, bins=2) %>%
logistic_overlay
missing_vars = paste0(predictors[!(predictors%in%testme)], collapse=", ")
outcome
predictors
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model, alpha = .1, bins=2) %>%
logistic_overlay
methods("get_terms")
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model, alpha = .1, bins=2) %>%
logistic_overlay
class(nn_model$model)
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
predictors
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
devtools::load_all(".")
compare.fits(fire~civilian_deserve | teleology,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
compare.fits(fire~Ethnicity,
data=d, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
# maybe it's not going so well because of interactions?
compare.fits(fire~civilian_deserve | Guilty,
data=d, rf_mod, nn_model$model, alpha = .1, bins=2) %>%
logistic_overlay
