#\' This is useful for the get_terms method.
#\'
#\' @param model Keras model object
#\' @param response_var Name of the response variable
#\' @return The model object with response variable attribute set
#\' @export
set_response_var <- function(model, response_var) {
attr(model, "response_var") <- response_var
return(model)
}'
writeLines(r_helpers_content, "R/helpers.R")
# README file
readme_content <- '# nnflex
Neural Network Extensions for Flexplot
## Overview
`nnflex` extends the functionality of the `flexplot` package to support neural network models, particularly those built with Keras/TensorFlow. It provides seamless integration with flexplot\'s `compare.fits()` function for visualizing neural network predictions.
## Installation
```r
# Install from GitHub (once uploaded)
# devtools::install_github("yourusername/nnflex")
# For now, install locally
devtools::install("path/to/nnflex")
```
## Usage
```r
library(flexplot)
library(nnflex)
library(keras)
# Train your neural network
model <- keras_model_sequential() %>%
layer_dense(units = 10, activation = "relu", input_shape = 3) %>%
layer_dense(units = 1, activation = "linear")
# Compile and fit your model
model %>% compile(optimizer = "adam", loss = "mse")
# ... fit your model ...
# Set the response variable name (helpful for plotting)
model <- set_response_var(model, "outcome_variable")
# Use with flexplot\'s compare.fits
compare.fits(outcome ~ predictor1 | predictor2,
data = your_data,
model1 = your_lm_model,
model2 = model)
```
## Features
- S3 methods for Keras models that integrate with flexplot
- Automatic handling of neural network predictions
- Support for both regression and classification models
- Helper functions for data preparation
## Requirements
- R >= 3.5.0
- flexplot
- keras
- tensorflow
'
writeLines(readme_content, "README.md")
# Basic test file
test_content <- 'library(testthat)
library(nnflex)
test_that("generate_predictions works for keras models", {
# This is a placeholder test - you\'ll need actual keras models to test properly
skip_if_not_installed("keras")
skip_if_not_installed("tensorflow")
# Add your tests here
expect_true(TRUE)  # Placeholder
})
test_that("helper functions work correctly", {
# Test data preparation
test_data <- data.frame(x1 = 1:5, x2 = letters[1:5])
result <- prepare_keras_data(test_data, categorical_vars = "x2")
expect_true(is.matrix(result))
expect_equal(nrow(result), 5)
})'
writeLines(test_content, "tests/testthat/test-keras-methods.R")
# testthat setup
testthat_content <- 'library(testthat)
library(nnflex)
test_check("nnflex")'
writeLines(testthat_content, "tests/testthat.R")
cat("nnflex package skeleton created successfully!\n")
cat("Next steps:\n")
cat("1. Update DESCRIPTION with your actual details\n")
cat("2. Run devtools::document() to generate documentation\n")
cat("3. Run devtools::check() to validate the package\n")
cat("4. Add more specific methods as needed\n")
# flex_nn Package Skeleton
# Run this script to create the package structure
# Create main package directory
dir.create("flex_nn", showWarnings = FALSE)
setwd("flex_nn")
# Create subdirectories
dir.create("R", showWarnings = FALSE)
dir.create("man", showWarnings = FALSE)
dir.create("tests", showWarnings = FALSE)
dir.create("tests/testthat", showWarnings = FALSE)
dir.create("vignettes", showWarnings = FALSE)
# DESCRIPTION file
description_content <- 'Package: flex_nn
Type: Package
Title: Neural Network Extensions for Flexplot
Version: 0.1.0
Author: Your Name <your.email@example.com>
Maintainer: Your Name <your.email@example.com>
Description: Extends flexplot functionality to support neural network models,
particularly Keras/TensorFlow models. Provides seamless integration with
flexplot\'s compare.fits function for visualizing neural network predictions.
License: GPL-3
Encoding: UTF-8
LazyData: true
Depends:
R (>= 3.5.0)
Imports:
flexplot,
keras,
tensorflow
Suggests:
testthat (>= 3.0.0),
knitr,
rmarkdown
VignetteBuilder: knitr
RoxygenNote: 7.2.0'
writeLines(description_content, "DESCRIPTION")
# NAMESPACE file (basic version - will be updated by roxygen2)
namespace_content <- 'export(generate_predictions.keras.engine.training.Model)
import(flexplot)
importFrom(keras, predict)
importFrom(tensorflow, tf)'
writeLines(namespace_content, "NAMESPACE")
# Main R file with keras method
r_keras_content <- '#\' Generate Predictions for Keras Models
#\'
#\' S3 method for generating predictions from Keras models for use with flexplot\'s
#\' compare.fits function.
#\'
#\' @param model A fitted Keras model object
#\' @param re Should random effects be predicted? (Not applicable for neural networks, ignored)
#\' @param pred.values Data frame containing predictor values for prediction
#\' @param pred.type Type of predictions (ignored for neural networks)
#\' @param report.se Should standard errors be reported? (Not supported for neural networks)
#\' @return A data frame with columns "prediction" and "model"
#\' @export
#\' @method generate_predictions keras.engine.training.Model
generate_predictions.keras.engine.training.Model <- function(model, re, pred.values, pred.type, report.se) {
# Convert pred.values to matrix format expected by Keras
# Assumes all predictors are numeric - may need adjustment for categorical variables
pred_matrix <- as.matrix(pred.values)
# Generate predictions
predictions <- keras::predict(model, pred_matrix)
# Handle different output shapes
if (is.matrix(predictions) && ncol(predictions) == 1) {
predictions <- as.vector(predictions)
} else if (is.matrix(predictions) && ncol(predictions) > 1) {
# For multi-class classification, take the class with highest probability
predictions <- apply(predictions, 1, which.max) - 1  # Convert to 0-based indexing
}
return(data.frame(prediction = predictions, model = "keras"))
}
#\' Get Terms from Keras Models
#\'
#\' Extract predictor and response variable names from Keras models.
#\' This function extends flexplot\'s get_terms function to work with Keras models.
#\'
#\' @param model A fitted Keras model object
#\' @return A list with elements "predictors" and "response"
#\' @export
get_terms.keras.engine.training.Model <- function(model) {
# For Keras models, we need to extract variable information differently
# This is a basic implementation - you may need to store variable names
# during model training or pass them as attributes
# Get input shape (excluding batch dimension)
input_shape <- model$input_shape
if (is.list(input_shape)) {
n_predictors <- input_shape[[2]]  # Assuming single input layer
} else {
n_predictors <- input_shape[2]
}
# Create generic predictor names - ideally these would be stored with the model
predictors <- paste0("X", 1:n_predictors)
# For neural networks, we typically don\'t know the response variable name
# This would need to be stored as a model attribute or passed separately
response <- attr(model, "response_var") %||% "Y"
return(list(predictors = predictors, response = response))
}
# Helper function for null coalescing
`%||%` <- function(x, y) if (is.null(x)) y else x'
writeLines(r_keras_content, "R/keras_methods.R")
# Basic helper functions
r_helpers_content <- '#\' Convert Data for Keras Prediction
#\'
#\' Converts a data frame to the matrix format expected by Keras models,
#\' handling categorical variables appropriately.
#\'
#\' @param data Data frame to convert
#\' @param categorical_vars Character vector of categorical variable names
#\' @param encoding_info List containing encoding information for categorical variables
#\' @return Matrix suitable for Keras prediction
#\' @export
prepare_keras_data <- function(data, categorical_vars = NULL, encoding_info = NULL) {
# Handle categorical variables
if (!is.null(categorical_vars)) {
for (var in categorical_vars) {
if (var %in% names(data)) {
# Basic one-hot encoding - you might want to use a more sophisticated approach
data[[var]] <- as.numeric(as.factor(data[[var]])) - 1
}
}
}
# Convert to matrix
as.matrix(data)
}
#\' Set Response Variable for Keras Model
#\'
#\' Helper function to store the response variable name as a model attribute.
#\' This is useful for the get_terms method.
#\'
#\' @param model Keras model object
#\' @param response_var Name of the response variable
#\' @return The model object with response variable attribute set
#\' @export
set_response_var <- function(model, response_var) {
attr(model, "response_var") <- response_var
return(model)
}'
writeLines(r_helpers_content, "R/helpers.R")
# README file
readme_content <- '# flex_nn
Neural Network Extensions for Flexplot
## Overview
`flex_nn` extends the functionality of the `flexplot` package to support neural network models, particularly those built with Keras/TensorFlow. It provides seamless integration with flexplot\'s `compare.fits()` function for visualizing neural network predictions.
## Installation
```r
# Install from GitHub (once uploaded)
# devtools::install_github("yourusername/flex_nn")
# For now, install locally
devtools::install("path/to/flex_nn")
```
## Usage
```r
library(flexplot)
library(flex_nn)
library(keras)
# Train your neural network
model <- keras_model_sequential() %>%
layer_dense(units = 10, activation = "relu", input_shape = 3) %>%
layer_dense(units = 1, activation = "linear")
# Compile and fit your model
model %>% compile(optimizer = "adam", loss = "mse")
# ... fit your model ...
# Set the response variable name (helpful for plotting)
model <- set_response_var(model, "outcome_variable")
# Use with flexplot\'s compare.fits
compare.fits(outcome ~ predictor1 | predictor2,
data = your_data,
model1 = your_lm_model,
model2 = model)
```
## Features
- S3 methods for Keras models that integrate with flexplot
- Automatic handling of neural network predictions
- Support for both regression and classification models
- Helper functions for data preparation
## Requirements
- R >= 3.5.0
- flexplot
- keras
- tensorflow
'
writeLines(readme_content, "README.md")
# Basic test file
test_content <- 'library(testthat)
library(flex_nn)
test_that("generate_predictions works for keras models", {
# This is a placeholder test - you\'ll need actual keras models to test properly
skip_if_not_installed("keras")
skip_if_not_installed("tensorflow")
# Add your tests here
expect_true(TRUE)  # Placeholder
})
test_that("helper functions work correctly", {
# Test data preparation
test_data <- data.frame(x1 = 1:5, x2 = letters[1:5])
result <- prepare_keras_data(test_data, categorical_vars = "x2")
expect_true(is.matrix(result))
expect_equal(nrow(result), 5)
})'
writeLines(test_content, "tests/testthat/test-keras-methods.R")
# testthat setup
testthat_content <- 'library(testthat)
library(flex_nn)
test_check("flex_nn")'
writeLines(testthat_content, "tests/testthat.R")
cat("flex_nn package skeleton created successfully!\n")
cat("Next steps:\n")
cat("1. Update DESCRIPTION with your actual details\n")
cat("2. Run devtools::document() to generate documentation\n")
cat("3. Run devtools::check() to validate the package\n")
cat("4. Add more specific methods as needed\n")
getwd()
setwd("../")
getwd()
# flex_nn Package Skeleton
# Run this script to create the package structure
# Create main package directory
dir.create("flex_nn", showWarnings = FALSE)
setwd("flex_nn")
# Create subdirectories
dir.create("R", showWarnings = FALSE)
dir.create("man", showWarnings = FALSE)
dir.create("tests", showWarnings = FALSE)
dir.create("tests/testthat", showWarnings = FALSE)
dir.create("vignettes", showWarnings = FALSE)
# DESCRIPTION file
description_content <- 'Package: flex_nn
Type: Package
Title: Neural Network Extensions for Flexplot
Version: 0.1.0
Author: Your Name <your.email@example.com>
Maintainer: Your Name <your.email@example.com>
Description: Extends flexplot functionality to support neural network models,
particularly Keras/TensorFlow models. Provides seamless integration with
flexplot\'s compare.fits function for visualizing neural network predictions.
License: GPL-3
Encoding: UTF-8
LazyData: true
Depends:
R (>= 3.5.0)
Imports:
flexplot,
keras,
tensorflow
Suggests:
testthat (>= 3.0.0),
knitr,
rmarkdown
VignetteBuilder: knitr
RoxygenNote: 7.2.0'
writeLines(description_content, "DESCRIPTION")
# NAMESPACE file (basic version - will be updated by roxygen2)
namespace_content <- 'export(generate_predictions.keras.engine.training.Model)
import(flexplot)
importFrom(keras, predict)
importFrom(tensorflow, tf)'
writeLines(namespace_content, "NAMESPACE")
# Main R file with keras method
r_keras_content <- '#\' Generate Predictions for Keras Models
#\'
#\' S3 method for generating predictions from Keras models for use with flexplot\'s
#\' compare.fits function.
#\'
#\' @param model A fitted Keras model object
#\' @param re Should random effects be predicted? (Not applicable for neural networks, ignored)
#\' @param pred.values Data frame containing predictor values for prediction
#\' @param pred.type Type of predictions (ignored for neural networks)
#\' @param report.se Should standard errors be reported? (Not supported for neural networks)
#\' @return A data frame with columns "prediction" and "model"
#\' @export
#\' @method generate_predictions keras.engine.training.Model
generate_predictions.keras.engine.training.Model <- function(model, re, pred.values, pred.type, report.se) {
# Convert pred.values to matrix format expected by Keras
# Assumes all predictors are numeric - may need adjustment for categorical variables
pred_matrix <- as.matrix(pred.values)
# Generate predictions
predictions <- keras::predict(model, pred_matrix)
# Handle different output shapes
if (is.matrix(predictions) && ncol(predictions) == 1) {
predictions <- as.vector(predictions)
} else if (is.matrix(predictions) && ncol(predictions) > 1) {
# For multi-class classification, take the class with highest probability
predictions <- apply(predictions, 1, which.max) - 1  # Convert to 0-based indexing
}
return(data.frame(prediction = predictions, model = "keras"))
}
#\' Get Terms from Keras Models
#\'
#\' Extract predictor and response variable names from Keras models.
#\' This function extends flexplot\'s get_terms function to work with Keras models.
#\'
#\' @param model A fitted Keras model object
#\' @return A list with elements "predictors" and "response"
#\' @export
get_terms.keras.engine.training.Model <- function(model) {
# For Keras models, we need to extract variable information differently
# This is a basic implementation - you may need to store variable names
# during model training or pass them as attributes
# Get input shape (excluding batch dimension)
input_shape <- model$input_shape
if (is.list(input_shape)) {
n_predictors <- input_shape[[2]]  # Assuming single input layer
} else {
n_predictors <- input_shape[2]
}
# Create generic predictor names - ideally these would be stored with the model
predictors <- paste0("X", 1:n_predictors)
# For neural networks, we typically don\'t know the response variable name
# This would need to be stored as a model attribute or passed separately
response <- attr(model, "response_var") %||% "Y"
return(list(predictors = predictors, response = response))
}
# Helper function for null coalescing
`%||%` <- function(x, y) if (is.null(x)) y else x'
writeLines(r_keras_content, "R/keras_methods.R")
# Basic helper functions
r_helpers_content <- '#\' Convert Data for Keras Prediction
#\'
#\' Converts a data frame to the matrix format expected by Keras models,
#\' handling categorical variables appropriately.
#\'
#\' @param data Data frame to convert
#\' @param categorical_vars Character vector of categorical variable names
#\' @param encoding_info List containing encoding information for categorical variables
#\' @return Matrix suitable for Keras prediction
#\' @export
prepare_keras_data <- function(data, categorical_vars = NULL, encoding_info = NULL) {
# Handle categorical variables
if (!is.null(categorical_vars)) {
for (var in categorical_vars) {
if (var %in% names(data)) {
# Basic one-hot encoding - you might want to use a more sophisticated approach
data[[var]] <- as.numeric(as.factor(data[[var]])) - 1
}
}
}
# Convert to matrix
as.matrix(data)
}
#\' Set Response Variable for Keras Model
#\'
#\' Helper function to store the response variable name as a model attribute.
#\' This is useful for the get_terms method.
#\'
#\' @param model Keras model object
#\' @param response_var Name of the response variable
#\' @return The model object with response variable attribute set
#\' @export
set_response_var <- function(model, response_var) {
attr(model, "response_var") <- response_var
return(model)
}'
writeLines(r_helpers_content, "R/helpers.R")
# README file
readme_content <- '# flex_nn
Neural Network Extensions for Flexplot
## Overview
`flex_nn` extends the functionality of the `flexplot` package to support neural network models, particularly those built with Keras/TensorFlow. It provides seamless integration with flexplot\'s `compare.fits()` function for visualizing neural network predictions.
## Installation
```r
# Install from GitHub (once uploaded)
# devtools::install_github("yourusername/flex_nn")
# For now, install locally
devtools::install("path/to/flex_nn")
```
## Usage
```r
library(flexplot)
library(flex_nn)
library(keras)
# Train your neural network
model <- keras_model_sequential() %>%
layer_dense(units = 10, activation = "relu", input_shape = 3) %>%
layer_dense(units = 1, activation = "linear")
# Compile and fit your model
model %>% compile(optimizer = "adam", loss = "mse")
# ... fit your model ...
# Set the response variable name (helpful for plotting)
model <- set_response_var(model, "outcome_variable")
# Use with flexplot\'s compare.fits
compare.fits(outcome ~ predictor1 | predictor2,
data = your_data,
model1 = your_lm_model,
model2 = model)
```
## Features
- S3 methods for Keras models that integrate with flexplot
- Automatic handling of neural network predictions
- Support for both regression and classification models
- Helper functions for data preparation
## Requirements
- R >= 3.5.0
- flexplot
- keras
- tensorflow
'
writeLines(readme_content, "README.md")
# Basic test file
test_content <- 'library(testthat)
library(flex_nn)
test_that("generate_predictions works for keras models", {
# This is a placeholder test - you\'ll need actual keras models to test properly
skip_if_not_installed("keras")
skip_if_not_installed("tensorflow")
# Add your tests here
expect_true(TRUE)  # Placeholder
})
test_that("helper functions work correctly", {
# Test data preparation
test_data <- data.frame(x1 = 1:5, x2 = letters[1:5])
result <- prepare_keras_data(test_data, categorical_vars = "x2")
expect_true(is.matrix(result))
expect_equal(nrow(result), 5)
})'
writeLines(test_content, "tests/testthat/test-keras-methods.R")
# testthat setup
testthat_content <- 'library(testthat)
library(flex_nn)
test_check("flex_nn")'
writeLines(testthat_content, "tests/testthat.R")
cat("flex_nn package skeleton created successfully!\n")
cat("Next steps:\n")
cat("1. Update DESCRIPTION with your actual details\n")
cat("2. Run devtools::document() to generate documentation\n")
cat("3. Run devtools::check() to validate the package\n")
cat("4. Add more specific methods as needed\n")
getwd()
